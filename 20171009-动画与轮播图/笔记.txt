

. 当前目录
.. 上一级目录

<img src="1.jpg">


var a = 100                  数字
	"100"     '100'      字符串变量
	[1, 2, 3]               数组
	{年龄: 18}			对象


练习： 定义对象，包含属性 年龄:18, 身高:180， 分别输出对应属性的值！
		做完将代码发到 群中！
			9:26对对



if (条件为真) {
	执行这里的代码
} else {
	执行这里的代码
}

【练习】
有2个数，a,b  请输出 a和b 中较大值！

	9:40 对对


循环结构
	while
	do-while
	for

	for (起始值; 终止值; 变化量) {
		循环语句
	}

例如：
	for (var i = 1; i <= 100; i++)    // 1, 2, 3, 
	{
		console.log(i);
	}

练习：
	输出-50 ~ 50  之间所有的整数。  例如： -50， -49， -48， ... 50
		9:45对对



函数格式

	定义函数：
		function 函数名(参数列表) 
		{
			return 100;
		}

	调用函数
		函数名(传递的参数列表)

	例如：
		function print()    代表定义函数print
		{
			这里是包起来的代码
		}

		function max(a, b)
		{
			输出a和b之间的最大值
		}

		max(5, 3)
练习：
	定义函数max，求出2个数之和，并返回！要求使用 return   
		10:00 对对。  做完发到群里

练习：
	定义函数f1, 它有6个参数，请求出这6个数之和并返回。  【做完发到群里！】
		思考： 有没有更好的办法
	
	10:15 对对


数组
	var a = [1,2,3,4,5];

	for (var i = 0; i < a.length; i++) {
		console.log(a[i])
	}

	a.length

	a.sort();         排序
	a.sort( function(a,b) {return a<b}  );

休息20分钟， 10:50 继续.



【练习】 定义数组，包含10个元素，让每个元素逆序，并输出逆序后的结果。
	提示： 可以使用 reverse 方法

例如：
	1,2,3,...10
	10,9,8 ...1

10:59 对对



对象：  把代码和属性包在一起

	var a = {name: "Jack"}
	var a = {name: "Jack", age: 36}
	var a = {name: "Jack", age: 36, children: ["Kyle", "Kate", "Kevin"] }

练习：
	定义1个函数，返回 5个参数中间， 随意【两个】数。
		提示： 对象

	例如：
		function m1(a,b,c,d,e)
		{
			return 随意两个
		}


var a = {name: "Jack", age: 36, children: ["Kyle", "Kate", "Kevin"] }

a.name
a["name"]


var k = "name"
a[k]

for (var k in obj)
{
	obj[k]
}



<div id="box1"> </div>

var aDiv = document.getElementsByTagName("div")
var oDiv = document.getElementById("box1")

oDiv.id
oDiv.style
oDiv.style.width

oDiv.innerHTML

// 创建h3标签
var oH3 = document.createElement("h3")

// 将h3标签添加到div中去
oDiv.appendChild(oH3);




// 每隔1秒执行的定时器
var timer = setInterval(function() {
	
	// 关闭定时器
	clearInterval(timer)

}, 1000)



function m1( callback )
{
	
	callback()
}






为了让动画使用更加方便，所以，我们封装函数

采用缓冲运动
	1. 物体  
	2. 目标
	3. 变化的公式名



缓冲动画：采用公式来实现的
动画函数的封装
间歇性轮播图


作业：

	如果有不明白的地方，记录下来，明天讲解。